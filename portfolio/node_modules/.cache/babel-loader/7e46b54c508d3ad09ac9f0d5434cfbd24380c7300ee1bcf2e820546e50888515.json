{"ast":null,"code":"import Particles,{initParticlesEngine}from\"@tsparticles/react\";import{useEffect,useMemo,useState}from\"react\";// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport{loadSlim}from\"@tsparticles/slim\";// if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ParticlesComponent=props=>{const[init,setInit]=useState(false);// this should be run only once per application lifetime\nuseEffect(()=>{initParticlesEngine(async engine=>{// you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n// this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n// starting from v2 you can add only the features you need reducing the bundle size\n//await loadAll(engine);\n//await loadFull(engine);\nawait loadSlim(engine);//await loadBasic(engine);\n}).then(()=>{setInit(true);});},[]);const particlesLoaded=container=>{console.log(container);};const options=useMemo(()=>({background:{color:{value:\"#000\"}},fpsLimit:200,interactivity:{events:{onClick:{enable:true,mode:\"push\"},onHover:{enable:true,mode:\"repulse\"}},modes:{repulse:{distance:100},push:{distance:130,duration:15},grab:{distance:100}}},particles:{color:{value:\"none\"},links:{color:\"#ccc\",distance:150,enable:true,opacity:0.2,width:1},move:{direction:\"top\",enable:true,outModes:{default:\"out\"},random:true,speed:7,straight:false},number:{density:{enable:true,area:200},value:150},opacity:{value:1.0},shape:{type:\"polygon\"},size:{value:{min:1,max:3}}},detectRetina:true}),[]);return/*#__PURE__*/_jsx(Particles,{id:props.id,init:particlesLoaded,options:options});};export default ParticlesComponent;","map":{"version":3,"names":["Particles","initParticlesEngine","useEffect","useMemo","useState","loadSlim","jsx","_jsx","ParticlesComponent","props","init","setInit","engine","then","particlesLoaded","container","console","log","options","background","color","value","fpsLimit","interactivity","events","onClick","enable","mode","onHover","modes","repulse","distance","push","duration","grab","particles","links","opacity","width","move","direction","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","max","detectRetina","id"],"sources":["C:/Users/leona/Documents/GitHub/personal/portfolio/src/components/particles.js"],"sourcesContent":["import Particles, { initParticlesEngine } from \"@tsparticles/react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\r\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\r\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\r\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\r\n\r\nconst ParticlesComponent = (props) => {\r\n  const [init, setInit] = useState(false);\r\n  // this should be run only once per application lifetime\r\n  useEffect(() => {\r\n    initParticlesEngine(async (engine) => {\r\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\r\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\r\n      // starting from v2 you can add only the features you need reducing the bundle size\r\n      //await loadAll(engine);\r\n      //await loadFull(engine);\r\n      await loadSlim(engine);\r\n      //await loadBasic(engine);\r\n    }).then(() => {\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  const particlesLoaded = (container) => {\r\n    console.log(container);\r\n  };\r\n\r\n  const options = useMemo(\r\n    () => ({\r\n      background: {\r\n        color: {\r\n          value: \"#000\",\r\n        },\r\n      },\r\n      fpsLimit: 200,\r\n      interactivity: {\r\n        events: {\r\n          onClick: {\r\n            enable: true,\r\n            mode: \"push\",\r\n          },\r\n          onHover: {\r\n            enable: true,\r\n            mode: \"repulse\",\r\n          },\r\n        },\r\n        modes: {\r\n          repulse: {\r\n            distance: 100,\r\n          },\r\n          push: {\r\n            distance: 130,\r\n            duration: 15,\r\n          },\r\n          grab: {\r\n            distance: 100,\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        color: {\r\n          value: \"none\",\r\n        },\r\n        links: {\r\n          color: \"#ccc\",\r\n          distance: 150,\r\n          enable: true,\r\n          opacity: 0.2,\r\n          width: 1,\r\n        },\r\n        move: {\r\n          direction: \"top\",\r\n          enable: true,\r\n          outModes: {\r\n            default: \"out\",\r\n          },\r\n          random: true,\r\n          speed: 7,\r\n          straight: false,\r\n        },\r\n        number: {\r\n          density: {\r\n            enable: true,\r\n            area: 200,\r\n          },\r\n          value: 150,\r\n        },\r\n        opacity: {\r\n          value: 1.0,\r\n        },\r\n        shape: {\r\n          type: \"polygon\",\r\n        },\r\n        size: {\r\n          value: { min: 1, max: 3 },\r\n        },\r\n      },\r\n      detectRetina: true,\r\n    }),\r\n    []\r\n  );\r\n\r\n  return <Particles id={props.id} init={particlesLoaded} options={options} />;\r\n};\r\n\r\nexport default ParticlesComponent;\r\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,EAAIC,mBAAmB,KAAQ,oBAAoB,CACnE,OAASC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CACpD;AACA;AACA,OAASC,QAAQ,KAAQ,mBAAmB,CAAE;AAC9C;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAEA,KAAM,CAAAC,kBAAkB,CAAIC,KAAK,EAAK,CACpC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CACvC;AACAF,SAAS,CAAC,IAAM,CACdD,mBAAmB,CAAC,KAAO,CAAAW,MAAM,EAAK,CACpC;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAP,QAAQ,CAACO,MAAM,CAAC,CACtB;AACF,CAAC,CAAC,CAACC,IAAI,CAAC,IAAM,CACZF,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,eAAe,CAAIC,SAAS,EAAK,CACrCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC,CACxB,CAAC,CAED,KAAM,CAAAG,OAAO,CAAGf,OAAO,CACrB,KAAO,CACLgB,UAAU,CAAE,CACVC,KAAK,CAAE,CACLC,KAAK,CAAE,MACT,CACF,CAAC,CACDC,QAAQ,CAAE,GAAG,CACbC,aAAa,CAAE,CACbC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPC,MAAM,CAAE,IAAI,CACZC,IAAI,CAAE,MACR,CAAC,CACDC,OAAO,CAAE,CACPF,MAAM,CAAE,IAAI,CACZC,IAAI,CAAE,SACR,CACF,CAAC,CACDE,KAAK,CAAE,CACLC,OAAO,CAAE,CACPC,QAAQ,CAAE,GACZ,CAAC,CACDC,IAAI,CAAE,CACJD,QAAQ,CAAE,GAAG,CACbE,QAAQ,CAAE,EACZ,CAAC,CACDC,IAAI,CAAE,CACJH,QAAQ,CAAE,GACZ,CACF,CACF,CAAC,CACDI,SAAS,CAAE,CACTf,KAAK,CAAE,CACLC,KAAK,CAAE,MACT,CAAC,CACDe,KAAK,CAAE,CACLhB,KAAK,CAAE,MAAM,CACbW,QAAQ,CAAE,GAAG,CACbL,MAAM,CAAE,IAAI,CACZW,OAAO,CAAE,GAAG,CACZC,KAAK,CAAE,CACT,CAAC,CACDC,IAAI,CAAE,CACJC,SAAS,CAAE,KAAK,CAChBd,MAAM,CAAE,IAAI,CACZe,QAAQ,CAAE,CACRC,OAAO,CAAE,KACX,CAAC,CACDC,MAAM,CAAE,IAAI,CACZC,KAAK,CAAE,CAAC,CACRC,QAAQ,CAAE,KACZ,CAAC,CACDC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPrB,MAAM,CAAE,IAAI,CACZsB,IAAI,CAAE,GACR,CAAC,CACD3B,KAAK,CAAE,GACT,CAAC,CACDgB,OAAO,CAAE,CACPhB,KAAK,CAAE,GACT,CAAC,CACD4B,KAAK,CAAE,CACLC,IAAI,CAAE,SACR,CAAC,CACDC,IAAI,CAAE,CACJ9B,KAAK,CAAE,CAAE+B,GAAG,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAC1B,CACF,CAAC,CACDC,YAAY,CAAE,IAChB,CAAC,CAAC,CACF,EACF,CAAC,CAED,mBAAO/C,IAAA,CAACP,SAAS,EAACuD,EAAE,CAAE9C,KAAK,CAAC8C,EAAG,CAAC7C,IAAI,CAAEI,eAAgB,CAACI,OAAO,CAAEA,OAAQ,CAAE,CAAC,CAC7E,CAAC,CAED,cAAe,CAAAV,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}